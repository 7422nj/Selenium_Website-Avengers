**************************************************************************

Some of The Most Important SQL Commands

SELECT - extracts data from a database

UPDATE - updates data in a database

DELETE - deletes data from a database

INSERT INTO - inserts new data into a database

CREATE DATABASE - creates a new database

ALTER DATABASE - modifies a database

CREATE TABLE - creates a new table

ALTER TABLE - modifies a table

DROP TABLE - deletes a table but you cannot go back to that data because its gone from the database

DELETE TABLE - deletes Table but you can rollback and is still in database

CREATE INDEX - creates an index (search key)

DROP INDEX - deletes an index

******** Examples ****************************************************

SELECT * FROM Customers;

The SQL SELECT Statement:
The SELECT statement is used to select data from a database.

The data returned is stored in a result table, called the result-set.

SELECT Syntax:

SELECT column1, column2, ...
FROM table_name;

Here, column1, column2, ... are the field names of the table you want to select data from.
If you want to select all the fields available in the table, use the following syntax: SELECT * FROM table_name;

The following SQL statement selects the "CustomerName" and "City" columns from the "Customers" table:

Example: SELECT CustomerName, City FROM Customers;
-----------------------------------------------------------------------------------------------------------------------------------------------------------

The SQL SELECT DISTINCT Statement:

The SELECT DISTINCT statement is used to return only distinct (different) values.

Inside a table, a column often contains many duplicate values; and sometimes you only want to list the different (distinct) values.

SELECT DISTINCT Syntax:

SELECT DISTINCT column1, column2 FROM table_name;

----------------------------------------------------------------------------------------------------------------------------------------------------------

The SQL WHERE Clause:
The WHERE clause is used to filter records.

It is used to extract only those records that fulfill a specified condition.

WHERE Syntax
SELECT column1, column2, ...
FROM table_name
WHERE condition;

WHERE Clause Example:

The following SQL statement selects all the customers from the country "Mexico", in the "Customers" table:

Example:
SELECT * FROM Customers
WHERE Country='Mexico';

Operators in The WHERE Clause
The following operators can be used in the WHERE clause:

Operator     Description
   =		 Equal
   >		 Greater than
   <		 Less than
   >=		 Greater than or equal
   <=		 Less than or equal
   <>		 Not equal. Note: In some versions of SQL this operator may be written as !=
   BETWEEN	 Between a certain range
   LIKE		 Search for a pattern
   IN		 To specify multiple possible values for a column

The SQL AND, OR and NOT Operators
The WHERE clause can be combined with AND, OR, and NOT operators.

The AND and OR operators are used to filter records based on more than one condition:

The AND operator displays a record if all the conditions separated by AND are TRUE.
The OR operator displays a record if any of the conditions separated by OR is TRUE.
The NOT operator displays a record if the condition(s) is NOT TRUE.

AND Syntax:
SELECT column1, column2, ...
FROM table_name
WHERE condition1 AND condition2 AND condition3 ...; <- AND us used for TRUE conditions

OR Syntax:
SELECT column1, column2, ...
FROM table_name
WHERE condition1 OR condition2 OR condition3 ...; <- conditions separated by OR is TRUE.

NOT Syntax:
SELECT column1, column2, ...
FROM table_name
WHERE NOT condition;

The SQL ORDER BY Keyword
The ORDER BY keyword is used to sort the result-set in ascending or descending order.

The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.

ORDER BY Syntax
SELECT column1, column2, ... <- return value
FROM table_name <- from table_employees;
ORDER BY column1, column2, ... <- ascending is by default set in the Database , DESC

ORDER BY Example
The following SQL statement selects all customers from the "Customers" table, sorted by the "Country" column:

Example
SELECT * FROM Customers
ORDER BY Country;  <- by default ascending

ORDER BY DESC Example
The following SQL statement selects all customers from the "Customers" table, sorted DESCENDING by the "Country" column:

Example
SELECT * FROM Customers
ORDER BY Country DESC; <- allows us to get value in descending order

ORDER BY Several Columns Example 2
The following SQL statement selects all customers from the "Customers" table, sorted ascending by the "Country" and descending by the "CustomerName" column:

Example
SELECT * FROM Customers
ORDER BY Country ASC, CustomerName DESC;

Difference is :
Country ASC -> ascending
CustomerName DESC -> descending
- Allows you get a return of ascending of a column and descending of a column

The SQL INSERT INTO Statement
The INSERT INTO statement is used to insert new records in a table.

INSERT INTO Syntax
It is possible to write the INSERT INTO statement in two ways:

1. Specify both the column names and the values to be inserted:

INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);

2. If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query.
However, make sure the order of the values is in the same order as the columns in the table.
Here, the INSERT INTO syntax would be as follows:

INSERT INTO table_employees <- insert into this table
VALUES (value1, value2, value3, ...); <- adding these values

------------------------------------------------------------------------------------------------------------------------------------------------------------

UPDATE * FROM Customers;

DELETE * FROM Customers;

**************************************************************************